1
00:00:01,240 --> 00:00:03,170
[Deep Dive]

2
00:00:03,170 --> 00:00:06,220
[Console Users & Permission: File Permissions with Jim Hoskins]

3
00:00:06,620 --> 00:00:08,600
[Jim Hoskins]: POSIX provides a pretty robust

4
00:00:08,600 --> 00:00:10,650
and straightforward permissions system. 

5
00:00:10,650 --> 00:00:12,950
There are 3 actions you need to know about:

6
00:00:12,950 --> 00:00:15,210
reading, writing, and executing. 

7
00:00:15,210 --> 00:00:18,520
Reading is the ability to read the contents of a file

8
00:00:18,520 --> 00:00:21,740
and writing allows you to update or delete a file. 

9
00:00:21,740 --> 00:00:24,650
Executing only comes into play with programs. 

10
00:00:24,650 --> 00:00:27,670
Since programs are just files, the execution permission

11
00:00:27,670 --> 00:00:29,170
tells the operating system 

12
00:00:29,170 --> 00:00:31,650
that "this file can be executed or run" 

13
00:00:31,650 --> 00:00:33,340
as well as who's allowed to run it. 

14
00:00:33,340 --> 00:00:35,770
So we have read, write, and execute

15
00:00:35,770 --> 00:00:38,170
shortened to "r", "w," and "x."

16
00:00:38,170 --> 00:00:40,700
For each file, permissions can be defined 

17
00:00:40,700 --> 00:00:42,080
on 3 different entities.

18
00:00:42,080 --> 00:00:45,730
Each file is assigned a user or "owner." 

19
00:00:45,730 --> 00:00:48,150
If you create the new file with the user "treehouse,"

20
00:00:48,150 --> 00:00:50,550
by default that file will belong to you. 

21
00:00:51,380 --> 00:00:53,360
This is an actual property of the file. 

22
00:00:53,360 --> 00:00:55,820
Now a file also belongs to a "group." 

23
00:00:55,820 --> 00:00:58,530
Each user has a primary group. 

24
00:00:58,530 --> 00:01:01,330
By default, that group matches your username. 

25
00:01:01,330 --> 00:01:03,860
For instance, there's also a group called, "treehouse"

26
00:01:03,860 --> 00:01:06,710
which is distinct from the user, "treehouse."

27
00:01:06,710 --> 00:01:10,640
The difference is I could add a user to the group, "treehouse."

28
00:01:10,640 --> 00:01:13,470
Each user can belong to any number of groups

29
00:01:13,470 --> 00:01:16,460
but only has 1 primary group. 

30
00:01:16,460 --> 00:01:18,130
When you create a file, 

31
00:01:18,130 --> 00:01:21,440
a group is also assigned to that file as the group owner. 

32
00:01:22,180 --> 00:01:24,230
Separate levels of permissions can be set

33
00:01:24,230 --> 00:01:26,640
for the user owner as well as the group owner. 

34
00:01:26,640 --> 00:01:29,600
You can set the permissions for other users as well. 

35
00:01:29,600 --> 00:01:31,810
This would be used for a user who is not the owner

36
00:01:31,810 --> 00:01:34,400
or a member of the owning group of the file. 

37
00:01:34,400 --> 00:01:36,240
These 3 levels

38
00:01:36,240 --> 00:01:38,600
are abbreviated "u," "g," and "o"

39
00:01:38,600 --> 00:01:41,390
for "user," "group," and "other," 

40
00:01:41,390 --> 00:01:44,040
and in that order from left to right--u, g, o. 

41
00:01:44,880 --> 00:01:48,130
Each file and directory has 3 types of permissions--

42
00:01:48,130 --> 00:01:50,170
read, write, and execute--

43
00:01:50,170 --> 00:01:54,220
and these 3 permissions can be defined on the user, group, and other. 

44
00:01:54,220 --> 00:01:56,850
This means there are 9 permissions on the file--

45
00:01:56,850 --> 00:01:59,320
read, write, and execute for each of the 3 levels. 

46
00:01:59,320 --> 00:02:02,800
These are often represented as a string of 9 characters:

47
00:02:02,800 --> 00:02:05,800
"rwx," "rwx," "rwx." 

48
00:02:06,070 --> 00:02:08,810
One triplet for each level of ownership. 

49
00:02:08,810 --> 00:02:11,260
When we do an ls-l,

50
00:02:11,260 --> 00:02:13,100
we can see these permissions. 

51
00:02:13,100 --> 00:02:15,400
The column shows 10 characters. 

52
00:02:15,400 --> 00:02:17,370
The first is "d" for directory,

53
00:02:17,370 --> 00:02:19,820
signifying that it's a directory or file. 

54
00:02:19,820 --> 00:02:22,070
The next 9 are the permissions. 

55
00:02:22,070 --> 00:02:24,070
The first triplet of rwx

56
00:02:24,070 --> 00:02:26,480
 is for the owning user permissions. 

57
00:02:26,480 --> 00:02:28,570
The second triplet is for the owning group,

58
00:02:28,570 --> 00:02:31,580
and the last three is for other or everyone else. 

59
00:02:31,580 --> 00:02:34,300
If the r, w, or x is printed,

60
00:02:34,300 --> 00:02:36,060
that means the permission is true. 

61
00:02:36,060 --> 00:02:38,170
If it's represented as a dash, 

62
00:02:38,170 --> 00:02:40,150
then it's not. 

63
00:02:40,150 --> 00:02:43,020
You can use a command called "chmod" to modify the mode

64
00:02:43,020 --> 00:02:45,420
or permissions of a file or directory. 

65
00:02:45,420 --> 00:02:47,090
Let's check it out. 

66
00:02:47,090 --> 00:02:49,990
We're signed in in our normal Treehouse directory here,

67
00:02:49,990 --> 00:02:52,130
and if we type in ls-l

68
00:02:52,130 --> 00:02:54,650
to get the full directory listing, 

69
00:02:54,650 --> 00:02:56,380
we can see our columns starting at the left

70
00:02:56,380 --> 00:02:59,950
and our current permissions on those files and directories. 

71
00:02:59,950 --> 00:03:02,600
For instance, our first directory,

72
00:03:02,600 --> 00:03:07,760
you can see the triplet, rwx, rwx, r-x. 

73
00:03:07,760 --> 00:03:10,410
That means the user can rewrite and execute,

74
00:03:10,410 --> 00:03:12,450
the group can rewrite and execute,

75
00:03:12,450 --> 00:03:14,540
and everybody else can read and execute

76
00:03:14,540 --> 00:03:16,290
the document's directory

77
00:03:16,290 --> 00:03:18,870
but they can't write to it. 

78
00:03:18,870 --> 00:03:20,530
You'll see all three of these files

79
00:03:20,530 --> 00:03:22,450
or these 2 directories in one file

80
00:03:22,450 --> 00:03:25,090
all belong to the Treehouse user,

81
00:03:25,090 --> 00:03:27,190
specified in this column,

82
00:03:27,190 --> 00:03:29,650
and the Treehouse group. 

83
00:03:29,650 --> 00:03:32,480
You'll see that this hello.txt file 

84
00:03:32,480 --> 00:03:34,110
doesn't have an execute permission,

85
00:03:34,110 --> 00:03:36,360
because it is a text file,

86
00:03:36,360 --> 00:03:38,110
and execution doesn't make sense for it,

87
00:03:38,110 --> 00:03:40,880
because it's not something we want to run as a program,

88
00:03:40,880 --> 00:03:44,190
and that the user and group owner can read and write to it

89
00:03:44,190 --> 00:03:47,190
while everybody else may simply read it. 

90
00:03:48,280 --> 00:03:50,510
So to change these we use chmod

91
00:03:50,510 --> 00:03:53,050
for changing the mode of a file. 

92
00:03:53,050 --> 00:03:56,090
You can think of mode as the permissions. 

93
00:03:56,750 --> 00:04:00,160
One syntax for this is by typing "chmod,"

94
00:04:00,160 --> 00:04:02,640
and then we're going to describe the change 

95
00:04:02,640 --> 00:04:04,350
we want to make to the mode. 

96
00:04:04,350 --> 00:04:06,600
This comes in a few different parts. 

97
00:04:06,600 --> 00:04:09,910
The first is who we're talking about for this change.

98
00:04:09,910 --> 00:04:12,210
There's the user, 

99
00:04:12,210 --> 00:04:14,640
group, or other. 

100
00:04:14,640 --> 00:04:16,329
In this case, what I want to do

101
00:04:16,329 --> 00:04:19,779
is I want to change the hello.txt mode

102
00:04:19,779 --> 00:04:23,440
to allow writing by the other group. 

103
00:04:23,440 --> 00:04:26,680
So for the who I'm going to type in "o."

104
00:04:26,680 --> 00:04:28,590
Then we're going to say

105
00:04:28,590 --> 00:04:30,990
whether we want to add or remove

106
00:04:30,990 --> 00:04:33,810
the permission we're about to specify.

107
00:04:33,810 --> 00:04:37,310
Since we want to add the write permission, we'll be using a "+." 

108
00:04:37,310 --> 00:04:41,260
If we wanted to remove a permission, we would use a "-" instead. 

109
00:04:41,260 --> 00:04:44,560
Then we can say which permission we want to modify:

110
00:04:44,560 --> 00:04:49,210
r for read, w for write, or x for execute. 

111
00:04:49,210 --> 00:04:51,170
Since we want to add the write permission to other, 

112
00:04:51,170 --> 00:04:53,280
we're going to do "o+w"

113
00:04:53,280 --> 00:04:56,140
which means to other we are going to add the write permission,

114
00:04:56,140 --> 00:04:59,280
and then we specify which file or directory

115
00:04:59,280 --> 00:05:02,730
we're talking about--in our case, hello.txt. 

116
00:05:02,730 --> 00:05:04,350
So if I run that, 

117
00:05:04,350 --> 00:05:07,910
we can now ls-l to see the updated permissions

118
00:05:07,910 --> 00:05:09,890
and see that it's now changed

119
00:05:09,890 --> 00:05:12,620
to include the write permission for others. 

120
00:05:12,620 --> 00:05:14,500
If we wanted to, for instance, 

121
00:05:14,500 --> 00:05:16,830
add the execute permission for everybody, 

122
00:05:16,830 --> 00:05:18,300
we could do this:

123
00:05:18,300 --> 00:05:20,710
chmod.

124
00:05:20,710 --> 00:05:22,280
Now since we want to do it for everybody, 

125
00:05:22,280 --> 00:05:25,220
we can omit the o or u or g,

126
00:05:25,220 --> 00:05:27,390
and we can just say we want to--

127
00:05:27,390 --> 00:05:29,120
oops, it looks like I hit Enter. 

128
00:05:29,120 --> 00:05:31,600
Sorry, we'll try that again. There we go. 

129
00:05:31,600 --> 00:05:33,680
Like I was saying, since we're going to do it for everybody, 

130
00:05:33,680 --> 00:05:35,110
we don't have to specify who.

131
00:05:35,110 --> 00:05:37,770
We can simply type in "+x"

132
00:05:37,770 --> 00:05:39,930
to add the execution permission,

133
00:05:39,930 --> 00:05:42,590
and we're doing that to hello.txt. 

134
00:05:42,590 --> 00:05:45,090
Now if we run it again, ls-l,

135
00:05:45,090 --> 00:05:47,460
we can see that hello.txt

136
00:05:47,460 --> 00:05:50,620
is now executable by everybody. 

137
00:05:50,620 --> 00:05:53,930
Let's say we want it to not be executable by the other group. 

138
00:05:53,930 --> 00:05:56,100
Well, we can do chmod.

139
00:05:56,100 --> 00:05:58,270
For other we want to remove

140
00:05:58,270 --> 00:06:00,450
the execute permission. 

141
00:06:00,450 --> 00:06:03,430
It looks like I forgot to type the file I was talking about. 

142
00:06:03,430 --> 00:06:05,370
All of these parts are necessary.

143
00:06:05,370 --> 00:06:07,720
Now our command should be correct.

144
00:06:07,720 --> 00:06:09,400
We have changed the mode 

145
00:06:09,400 --> 00:06:12,060
for other, removed the execute permission

146
00:06:12,060 --> 00:06:14,240
on hello.txt. 

147
00:06:14,240 --> 00:06:16,850
Now if we try to run it, we don't get any errors.

148
00:06:16,850 --> 00:06:18,510
Let's take a look now.

149
00:06:19,890 --> 00:06:21,930
We see the execute permission for other

150
00:06:21,930 --> 00:06:24,000
has been removed. 

151
00:06:24,000 --> 00:06:27,330
Since I don't really want to leave this with the execution permission on,

152
00:06:27,330 --> 00:06:29,190
since it's simply a text file, 

153
00:06:29,190 --> 00:06:32,080
I'll do chmod remove x 

154
00:06:32,080 --> 00:06:35,130
from hello.txt. 

155
00:06:35,130 --> 00:06:37,680
Let's take a look. 

156
00:06:39,580 --> 00:06:41,750
The permissions are often represented 

157
00:06:41,750 --> 00:06:44,270
numerically as octal numbers. 

158
00:06:44,270 --> 00:06:46,050
Octal is a way of counting, 

159
00:06:46,050 --> 00:06:48,890
but using base 8 instead of base 10. 

160
00:06:48,890 --> 00:06:52,720
In decimal there are 10 numerals, 0-9.

161
00:06:52,720 --> 00:06:54,960
When we add 1 to 9, 

162
00:06:54,960 --> 00:06:56,820
we carry it over to the 10's place

163
00:06:56,820 --> 00:06:59,520
and get the number one-zero or 10.

164
00:06:59,520 --> 00:07:01,710
Meaning we have one 10

165
00:07:01,710 --> 00:07:03,560
and zero 1's. 

166
00:07:03,560 --> 00:07:07,810
Now in octal we only use 8 numerals, 0-7. 

167
00:07:08,310 --> 00:07:10,550
When you add 1 to 7, 

168
00:07:10,550 --> 00:07:12,580
the answer is still 8,

169
00:07:12,580 --> 00:07:16,050
but the number 8 in octal is represented as one-zero. 

170
00:07:16,050 --> 00:07:18,150
We carry it over to the next place, 

171
00:07:18,150 --> 00:07:21,250
but instead of being the 10's place it's the 8's place. 

172
00:07:21,250 --> 00:07:23,490
So when we read one-zero in octal, 

173
00:07:23,490 --> 00:07:25,110
it means 8. 

174
00:07:25,110 --> 00:07:27,080
Meaning that there's one 8

175
00:07:27,080 --> 00:07:29,280
and zero 1's. 

176
00:07:29,280 --> 00:07:31,580
The reason for this is each level of permission

177
00:07:31,580 --> 00:07:33,990
has 3 permissions that could be on or off. 

178
00:07:33,990 --> 00:07:37,000
That means there are 8 possible combinations that it could be, 

179
00:07:37,000 --> 00:07:40,230
which can be represented through the digits, 0-7. 

180
00:07:40,940 --> 00:07:43,820
The permission may be 742

181
00:07:43,820 --> 00:07:46,250
where 7 represents the user, 

182
00:07:46,250 --> 00:07:49,960
the middle digit represents the group--4, 

183
00:07:49,960 --> 00:07:52,430
and the last digit is for the other users. 

184
00:07:52,430 --> 00:07:55,190
So how do we remember which digits 0-7

185
00:07:55,190 --> 00:07:57,530
represent which levels of permission?

186
00:07:57,530 --> 00:07:59,610
It's actually pretty easy. 

187
00:07:59,610 --> 00:08:02,050
Each permission is assigned a value. 

188
00:08:02,050 --> 00:08:04,940
R is assigned 4, w is assigned 2, 

189
00:08:04,940 --> 00:08:08,170
and x is assigned 1. 

190
00:08:08,170 --> 00:08:10,640
For each permission that's given or granted, 

191
00:08:10,640 --> 00:08:13,120
we sum the corresponding values together.

192
00:08:13,120 --> 00:08:15,250
For instance, if all three are given,

193
00:08:15,250 --> 00:08:17,250
the result is the number 7

194
00:08:17,250 --> 00:08:20,380
because 4+2+1=7. 

195
00:08:20,380 --> 00:08:22,030
If we give no permissions, 

196
00:08:22,030 --> 00:08:24,700
then it's going to be 0 because nothing would be added together.

197
00:08:25,360 --> 00:08:27,590
If we allow reading and executing,

198
00:08:27,590 --> 00:08:29,220
it would be 5.

199
00:08:29,220 --> 00:08:32,280
If we allowed only reading, it would be 4. 

200
00:08:32,280 --> 00:08:34,980
And, of course, if none of the three are given, it would be 0. 

201
00:08:36,230 --> 00:08:38,690
Now we'll be able to assign absolute permissions 

202
00:08:38,690 --> 00:08:40,740
by using a 3-digit octal number

203
00:08:40,740 --> 00:08:42,450
where the leftmost digit is the user,

204
00:08:42,450 --> 00:08:44,680
the middle is the group, and the last digit is other. 

205
00:08:45,610 --> 00:08:48,090
We can use this in chmod to do that. 

206
00:08:48,090 --> 00:08:50,190
Let's check it out. 

207
00:08:50,190 --> 00:08:54,170
So the octal form is much the same. Let's take a look at our current permissions. 

208
00:08:54,170 --> 00:08:57,420
We see what we have there. 

209
00:08:57,420 --> 00:08:59,620
Now if we were to convert these columns to a number,

210
00:08:59,620 --> 00:09:03,160
remember r represents the number 4,

211
00:09:03,160 --> 00:09:05,140
w is the number 2,

212
00:09:05,140 --> 00:09:07,610
and the x permission is number 1.

213
00:09:07,610 --> 00:09:11,600
So for this triplet, the first digit would be 4+2, which would be 6.

214
00:09:12,670 --> 00:09:14,140
This one would also be 6,

215
00:09:14,140 --> 00:09:16,910
and this one would also be 6. 

216
00:09:16,910 --> 00:09:20,020
What if I wanted to add the execution permission

217
00:09:20,020 --> 00:09:22,760
for everything on hello.txt?

218
00:09:22,760 --> 00:09:25,010
Well what I can do is chmod,

219
00:09:25,990 --> 00:09:27,850
and now I have to think about

220
00:09:27,850 --> 00:09:30,800
 exactly what that would mean numerically.

221
00:09:30,800 --> 00:09:32,390
By adding the execute permission,

222
00:09:32,390 --> 00:09:35,370
this would be 4+2+1

223
00:09:35,370 --> 00:09:37,300
since we're adding the execute permission

224
00:09:37,300 --> 00:09:39,130
as the number 1. 

225
00:09:39,130 --> 00:09:41,530
So this digit would be 7 for the user. 

226
00:09:41,530 --> 00:09:43,290
The second digit 

227
00:09:43,290 --> 00:09:45,900
would be 7, and the last digit would also be 7,

228
00:09:46,580 --> 00:09:49,190
and 777 is pretty much opening the file

229
00:09:49,190 --> 00:09:52,880
 to be modified or used or completely unprotected. 

230
00:09:52,880 --> 00:09:55,670
Generally, you don't want to make a file like that,

231
00:09:55,670 --> 00:09:57,870
but let's just try it out. 

232
00:09:57,870 --> 00:10:01,180
So it's chmod, and instead of using the letters

233
00:10:01,180 --> 00:10:03,110
and numbers and symbols, 

234
00:10:03,110 --> 00:10:06,080
we'll simply type in the 3-digit code,

235
00:10:06,080 --> 00:10:09,670
777, and again we have to type in the file

236
00:10:09,670 --> 00:10:11,430
that we want to modify. 

237
00:10:11,430 --> 00:10:13,520
We hit Enter, and if we take a look again,

238
00:10:13,520 --> 00:10:15,260
and we get ls-l, 

239
00:10:15,260 --> 00:10:17,810
we can now see everything is set. 

240
00:10:17,810 --> 00:10:20,920
Now I want to make it so I can 

241
00:10:20,920 --> 00:10:22,630
read and write as the user. 

242
00:10:22,630 --> 00:10:24,270
I want the group to be able to read,

243
00:10:24,270 --> 00:10:27,650
and I want other people to not be able to do anything. 

244
00:10:27,650 --> 00:10:29,950
So let's figure out how to modify that. 

245
00:10:29,950 --> 00:10:32,710
I want to remove the execution permission

246
00:10:32,710 --> 00:10:34,750
for everybody, because, like we've been saying, 

247
00:10:34,750 --> 00:10:37,760
it's a text file; it doesn't really need to have the execute permission. 

248
00:10:38,680 --> 00:10:40,380
What we'll do for the user,

249
00:10:40,380 --> 00:10:42,600
the first digit we need to have read and write,

250
00:10:42,600 --> 00:10:44,000
and that adds up to 6,

251
00:10:44,000 --> 00:10:46,060
because 4+2=6. 

252
00:10:46,060 --> 00:10:48,480
So our first digit is 6. 

253
00:10:48,480 --> 00:10:50,860
For the group, I want them to be able to read,

254
00:10:50,860 --> 00:10:52,420
but not write or execute. 

255
00:10:52,420 --> 00:10:54,100
Read is 4,

256
00:10:54,100 --> 00:10:56,360
and since we're not doing the other ones, 

257
00:10:56,360 --> 00:10:58,470
that's the number we're going to use. 

258
00:10:58,470 --> 00:11:01,770
For other, I don't want them to have any permissions

259
00:11:01,770 --> 00:11:04,090
so I can type in "0,"

260
00:11:04,090 --> 00:11:06,140
and that should be the correct permissions 

261
00:11:06,140 --> 00:11:08,210
for me to be able to read and write, 

262
00:11:08,210 --> 00:11:10,240
for my group to only be able to read,

263
00:11:10,240 --> 00:11:12,250
and for everybody else 

264
00:11:12,250 --> 00:11:15,250
to not be able to read, write, nor execute it. 

265
00:11:15,250 --> 00:11:17,780
We need to tell it what we want to change,

266
00:11:17,780 --> 00:11:19,120
and if we hit Enter, 

267
00:11:19,120 --> 00:11:21,660
type in ls-l, 

268
00:11:21,660 --> 00:11:23,110
and take a look, we can now see

269
00:11:23,110 --> 00:11:25,250
we have the desired permissions. 

270
00:11:25,250 --> 00:11:27,570
I can read and write, my group can read, 

271
00:11:27,570 --> 00:11:30,550
and other can do nothing. 

