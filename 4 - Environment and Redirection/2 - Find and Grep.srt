1
00:00:00,000 --> 00:00:02,690
[Deep Dive]

2
00:00:02,690 --> 00:00:06,220
[Console Environment & Redirection: Find + Grep, with Jim Hoskins]

3
00:00:06,220 --> 00:00:11,570
Quite often we want to find files, or even find text within certain files on our computer.

4
00:00:11,570 --> 00:00:15,090
Now since it's a console, we don't have a handy search box,

5
00:00:15,090 --> 00:00:18,010
like we do in most modern graphical operating systems.

6
00:00:18,010 --> 00:00:21,330
Instead we programs that run the search for us.

7
00:00:21,330 --> 00:00:25,240
The 2 main tools we utilize are called Find and Grep.

8
00:00:25,240 --> 00:00:29,550
Find allows us to locate a file based on its name, using patterns,

9
00:00:29,550 --> 00:00:33,540
and Grep lets us search within files for a certain pattern as well.

10
00:00:33,540 --> 00:00:35,850
Let's try them out.

11
00:00:35,850 --> 00:00:38,550
So of the 2 main commands we use for searching our system,

12
00:00:38,550 --> 00:00:40,640
we'll be looking at Find first.

13
00:00:40,640 --> 00:00:45,000
Find is used to locate files based on the file name.

14
00:00:45,000 --> 00:00:50,960
It's simply done by typing find, and then we give it a directory to base its search off of. 

15
00:00:50,960 --> 00:00:54,710
Now let's say we wanted to base it off of our current directory.

16
00:00:54,710 --> 00:00:58,180
Well the current directory is represented by a dot,

17
00:00:58,180 --> 00:01:00,950
which means we want to start our search from our current directory

18
00:01:00,950 --> 00:01:03,140
and search all the directories below it.

19
00:01:03,140 --> 00:01:05,860
Then we'll give it something to find.

20
00:01:05,860 --> 00:01:09,320
The way we do this is usually by simply typing -name,

21
00:01:09,320 --> 00:01:12,210
and then our next argument is the name of the file.

22
00:01:12,210 --> 00:01:18,110
So if we did "how_to_go_home.txt",

23
00:01:18,110 --> 00:01:22,040
this will find the file called how_to_go_home.txt, 

24
00:01:22,040 --> 00:01:24,040
based on our current directory.

25
00:01:24,040 --> 00:01:26,910
Now the results are listed 1 per line,

26
00:01:26,910 --> 00:01:30,010
and it's going to give us the path to the files found.

27
00:01:30,010 --> 00:01:34,190
So in this case it's saying that how_to_go_home.txt is in our Documents folder.

28
00:01:34,190 --> 00:01:37,880
Now right now we don't have very many files in our home directory to search for,

29
00:01:37,880 --> 00:01:40,010
but if you had many, many directories,

30
00:01:40,010 --> 00:01:43,400
and you knew you had a file somewhere called how_to_go_home.txt,

31
00:01:43,400 --> 00:01:46,890
the Find command could be particularly useful.

32
00:01:46,890 --> 00:01:49,630
Oftentimes you'll want to search on the entire system.

33
00:01:49,630 --> 00:01:54,390
Now this can take a long time, because it has to go through your entire system,

34
00:01:54,390 --> 00:01:58,770
but if you wanted to do that, you would start your search at /, or the root.

35
00:01:58,770 --> 00:02:05,060
Let's say I want to find a config file that I know is called "sudoers".

36
00:02:05,060 --> 00:02:10,449
Now notice that I used quotes here; however, I'm not using quotes here.

37
00:02:10,449 --> 00:02:13,980
You don't always needs quotes; however, it's a good idea to put them on.

38
00:02:13,980 --> 00:02:19,750
By using quotes, you can have multiple words used as 1 argument,

39
00:02:19,750 --> 00:02:22,360
as well as use some other special characters.

40
00:02:22,360 --> 00:02:25,150
Now this particular command doesn't require them.

41
00:02:25,150 --> 00:02:28,540
However, I'm going to put them on because it's good practice and a good habit to use.

42
00:02:28,540 --> 00:02:33,320
Now you'll notice we're getting some things here where we're getting Permission denied,

43
00:02:33,320 --> 00:02:36,120
and these are actually error messages.

44
00:02:36,120 --> 00:02:38,950
These aren't results; however, they're errors.

45
00:02:38,950 --> 00:02:42,810
These errors are actually being sent to another channel.

46
00:02:42,810 --> 00:02:44,920
However, they're still being printed out to our screen,

47
00:02:44,920 --> 00:02:47,380
so it appears that they're part of the results.

48
00:02:47,380 --> 00:02:51,160
However, they're actually errors, and we could actually filter these out.

49
00:02:51,160 --> 00:02:56,980
However, we do see that it found the file at /etc/sudoers.

50
00:02:56,980 --> 00:02:59,230
Now the reason we got all these errors

51
00:02:59,230 --> 00:03:03,220
is because, well, there are several directories and files on our system

52
00:03:03,220 --> 00:03:06,310
that our Treehouse user is just not allowed to look at.

53
00:03:06,310 --> 00:03:08,480
So if we're searching the entire system,

54
00:03:08,480 --> 00:03:12,170
every time we hit one of those directories or files that we're not allowed to see,

55
00:03:12,170 --> 00:03:16,140
it's going to give us an error message, but it did eventually find it.

56
00:03:16,140 --> 00:03:18,790
So we'll see a little bit later how we could

57
00:03:18,790 --> 00:03:21,850
remove these error messages from being printed out to our screen

58
00:03:21,850 --> 00:03:24,450
when we take a look at pipes and redirection.

59
00:03:24,450 --> 00:03:29,720
Now we can actually specify multiple directories to start searching from.

60
00:03:29,720 --> 00:03:32,610
So if we do find—and we're in our home directory—

61
00:03:32,610 --> 00:03:37,170
so if we did find and documents, and we wanted to also search in our bin directory

62
00:03:37,170 --> 00:03:44,830
for -name "how_to_go_home.txt",

63
00:03:44,830 --> 00:03:48,840
this would search both of our directories, documents and bin,

64
00:03:48,840 --> 00:03:51,760
and so if you really don't have 1 particular point,

65
00:03:51,760 --> 00:03:54,400
but you think your file might be in multiple places,

66
00:03:54,400 --> 00:03:57,900
you can simply list all the starting points you want for your search.

67
00:03:57,900 --> 00:04:01,100
So that's how you find a file based on its name.

68
00:04:01,100 --> 00:04:03,730
What if you want to search for something inside a file?

69
00:04:03,730 --> 00:04:06,360
Let's go ahead and clear our screen.

70
00:04:06,360 --> 00:04:08,730
Now depending on what commands you've run,

71
00:04:08,730 --> 00:04:11,500
the files in your home directory might be different than mine.

72
00:04:11,500 --> 00:04:16,560
If you encounter the problem where the file I'm using is not in your home directory,

73
00:04:16,560 --> 00:04:20,839
just trying using the commands using the files that do exist in your own directory,

74
00:04:20,839 --> 00:04:24,920
or create the files that I have, using the techniques we learned earlier.

75
00:04:24,920 --> 00:04:29,260
I'm going to take a look at our file hello.txt

76
00:04:29,260 --> 00:04:31,780
by simply typing cat hello.txt.

77
00:04:31,780 --> 00:04:36,510
What if we wanted to find out if there is the word "is"

78
00:04:36,510 --> 00:04:40,220
somewhere in this file, and we wanted to find out exactly where it is?

79
00:04:40,220 --> 00:04:43,430
Well Grep is the program we would use.

80
00:04:43,430 --> 00:04:46,080
Grep is G-R-E-P.

81
00:04:46,080 --> 00:04:49,360
The name is an initialism

82
00:04:49,360 --> 00:04:51,880
which means global regular expression print,

83
00:04:51,880 --> 00:04:55,690
which is a process used in several programs,

84
00:04:55,690 --> 00:04:59,840
which means we want to globally search through a file for a regular expression.

85
00:04:59,840 --> 00:05:04,930
Regular expression is a pattern that defines a particular expression

86
00:05:04,930 --> 00:05:07,010
that we may want to match against.

87
00:05:07,010 --> 00:05:10,590
This means that a regular expression has special characters 

88
00:05:10,590 --> 00:05:14,390
that allow us to define very complex patterns that we want to look for,

89
00:05:14,390 --> 00:05:16,910
and the print means we'll print it out.

90
00:05:16,910 --> 00:05:20,030
So Grep is a utility that does all those things.

91
00:05:20,030 --> 00:05:22,680
It basically looks through a file for a pattern,

92
00:05:22,680 --> 00:05:24,980
and every time it finds the pattern, it will print out

93
00:05:24,980 --> 00:05:26,980
the line that that pattern appears on.

94
00:05:26,980 --> 00:05:30,370
The 1st thing we need to pass to it is the pattern.

95
00:05:30,370 --> 00:05:32,850
For instance, I'm looking for the pattern "is".

96
00:05:32,850 --> 00:05:35,130
Again, the quotes aren't necessary in this case.

97
00:05:35,130 --> 00:05:38,790
However, as we go and build more complex regular expressions,

98
00:05:38,790 --> 00:05:41,300
the quotes will certainly help.

99
00:05:41,300 --> 00:05:45,390
Finally, we give it a file or a list of files that we want to search for.

100
00:05:45,390 --> 00:05:49,490
And in this case we'll check out hello.txt.

101
00:05:49,490 --> 00:05:54,520
Now it's going to print out every line where it finds the pattern I-S.

102
00:05:54,520 --> 00:05:56,520
So we can see that it appears

103
00:05:56,520 --> 00:06:00,050
on 6 different lines in hello.txt.

104
00:06:00,050 --> 00:06:02,290
We can look for some other patterns.

105
00:06:02,290 --> 00:06:06,600
In this case, I'm going to leave off the quotes, but it's the same thing.

106
00:06:06,600 --> 00:06:10,380
Let's see how many lines of the text have the word "line" in them.

107
00:06:10,380 --> 00:06:12,650
It appears 2.

108
00:06:12,650 --> 00:06:15,280
The 1st result is from that stretch of the file

109
00:06:15,280 --> 00:06:16,880
where there's 1 word per line,

110
00:06:16,880 --> 00:06:19,690
so the word "line" appears by itself on 1 of the lines

111
00:06:19,690 --> 00:06:21,910
and it also appears at the end of the file

112
00:06:21,910 --> 00:06:25,190
in the sentence "Now here is the last line of the file."

113
00:06:25,190 --> 00:06:29,890
The coloring may or may not appear on your system, based on the system you're on.

114
00:06:29,890 --> 00:06:32,530
It's actually an option passed to Grep,

115
00:06:32,530 --> 00:06:35,570
and the way the system is configured, it is set

116
00:06:35,570 --> 00:06:38,050
to automatically be turned on from the Treehouse console,

117
00:06:38,050 --> 00:06:40,120
which is nice, because it allows you to easily

118
00:06:40,120 --> 00:06:44,050
find the actual pattern within the lines that are printed out.

119
00:06:44,050 --> 00:06:46,660
Now there are some useful options to Grep.

120
00:06:46,660 --> 00:06:49,430
For instance, this wasn't particularly useful.

121
00:06:49,430 --> 00:06:53,060
It showed me that there are several instances of the word "is" in the file.

122
00:06:53,060 --> 00:06:55,740
However, I don't really have a sense of where they are.

123
00:06:55,740 --> 00:06:58,630
So something that would be useful is to print out 

124
00:06:58,630 --> 00:07:00,820
the line numbers ahead of each result.

125
00:07:00,820 --> 00:07:02,820
We can do that by typing grep,

126
00:07:02,820 --> 00:07:04,870
passing the -n option,

127
00:07:04,870 --> 00:07:07,940
and then we'll give it the pattern I-S

128
00:07:07,940 --> 00:07:10,290
and then the file that we want to search for.

129
00:07:10,290 --> 00:07:13,170
Now you'll see that the output is changed.

130
00:07:13,170 --> 00:07:16,030
Now it gives us line numbers ahead of each result.

131
00:07:16,030 --> 00:07:18,320
Let's do another search.

132
00:07:18,320 --> 00:07:20,480
We see that "this" appears, so let's say

133
00:07:20,480 --> 00:07:24,020
if I wanted to find grep "this", the word "this",

134
00:07:24,020 --> 00:07:26,720
or the pattern "this", in hello.txt.

135
00:07:26,720 --> 00:07:30,520
Now you'll notice that it gave us the lines that we're looking for.

136
00:07:30,520 --> 00:07:33,930
However, you'll notice that it didn't highlight the 1st "this".

137
00:07:33,930 --> 00:07:37,710
The reason is Grep, by default, has case sensitivity.

138
00:07:37,710 --> 00:07:40,140
If we were not interested in the case sensitivity,

139
00:07:40,140 --> 00:07:43,000
we could remove it by making it case insensitive.

140
00:07:43,000 --> 00:07:46,030
All we needed to do is pass the -i option

141
00:07:46,030 --> 00:07:48,160
and then the pattern and then the file.

142
00:07:48,160 --> 00:07:51,340
And you'll see we have extra lines now.

143
00:07:51,340 --> 00:07:53,790
We have "this", which is lowercase,

144
00:07:53,790 --> 00:07:56,250
we have the lines that we saw before,

145
00:07:56,250 --> 00:08:00,230
and you'll notice that "This" is now highlighted as well as the lowercase "this"

146
00:08:00,230 --> 00:08:02,380
because the capitalized T doesn't matter,

147
00:08:02,380 --> 00:08:03,780
but we also caught another line

148
00:08:03,780 --> 00:08:06,040
where "This" only appears capitalized.

149
00:08:06,040 --> 00:08:08,490
So the -i allowed us to do that.

150
00:08:08,560 --> 00:08:11,240
What if we were only interested in lines

151
00:08:11,240 --> 00:08:13,910
that did not have a particular pattern?

152
00:08:13,910 --> 00:08:16,410
The -v flag allows us to invert it.

153
00:08:16,410 --> 00:08:18,980
So we could do grep -v, 

154
00:08:18,980 --> 00:08:22,640
and let's say we want to find only lines that do not contain the letter "e".

155
00:08:22,640 --> 00:08:25,520
That's all we need to do—give it the name of the text,

156
00:08:25,520 --> 00:08:28,410
and these are the lines that do not contain the letter "e".

157
00:08:28,410 --> 00:08:31,410
So those were some useful command-line flags.

158
00:08:31,410 --> 00:08:34,049
I'd recommend for both Find and Grep

159
00:08:34,049 --> 00:08:37,179
to take a look at the manual, which you can find for Grep 

160
00:08:37,179 --> 00:08:40,350
by typing in man grep, manual grep.

161
00:08:40,350 --> 00:08:43,679
If you search through this and take a look at some of the options,

162
00:08:43,679 --> 00:08:47,230
you can see that there are some pretty useful options

163
00:08:47,230 --> 00:08:51,180
if what you've seen so far does not quite meet what you're looking for.

164
00:08:51,180 --> 00:08:54,160
So here we can see the -i ignores the case,

165
00:08:54,160 --> 00:08:56,920
the -v inverts the match, 

166
00:08:56,920 --> 00:08:59,340
and there are some other options that allow you

167
00:08:59,340 --> 00:09:01,740
to use Grep with a little bit more control.

168
00:09:01,740 --> 00:09:05,680
The same thing can be done for Find if you are ever confused about how Find works

169
00:09:05,680 --> 00:09:07,850
and the options you can pass to it.

170
00:09:07,850 --> 00:09:12,050
You'll remember that we actually used Grep a little while ago

171
00:09:12,050 --> 00:09:14,050
when we were learning about processes.

172
00:09:15,050 --> 00:09:21,560
We did this: ps aux, this pipe symbol, and Grep,

173
00:09:21,560 --> 00:09:24,760
and then we passed in what we were looking for—

174
00:09:24,760 --> 00:09:28,030
for instance, let's say, init, the init process.

175
00:09:28,030 --> 00:09:31,460
This is the same Grep program we just learned about,

176
00:09:31,460 --> 00:09:33,650
and you'll notice it's highlighted the same way.

177
00:09:33,650 --> 00:09:37,330
So Grep is useful not only in looking at files,

178
00:09:37,330 --> 00:09:40,170
but even the output of commands using this pipe symbol.

179
00:09:40,170 --> 00:09:43,050
And we're going to learn about how the pipe symbol works,

180
00:09:43,050 --> 00:09:45,030
which is important because it changes the way

181
00:09:45,030 --> 00:09:46,910
you think about how you run programs.

182
00:09:46,910 --> 00:09:52,410
We'll learn about that next.

