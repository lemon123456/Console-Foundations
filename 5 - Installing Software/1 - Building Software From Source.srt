1
00:00:00,700 --> 00:00:03,600
[Deep Dive]

2
00:00:03,600 --> 00:00:06,400
[Setting up a Server - Installing Software - with Jim Hoskins]

3
00:00:06,400 --> 00:00:09,700
Often, we want to install software via the console. 

4
00:00:09,700 --> 00:00:12,570
When using Linux, we usually install things a little bit differently 

5
00:00:12,570 --> 00:00:15,510
than you may be used to on Windows or OS X.

6
00:00:15,510 --> 00:00:17,650
Instead of graphical step-by-step installers, 

7
00:00:17,650 --> 00:00:19,650
we usually do one of two things: 

8
00:00:19,650 --> 00:00:21,650
either compile the source code ourselves 

9
00:00:21,650 --> 00:00:23,920
or use a package manager.

10
00:00:23,920 --> 00:00:26,640
A package manager is a tool that is usually associated 

11
00:00:26,640 --> 00:00:28,640
with your particular flavor of Linux. 

12
00:00:28,640 --> 00:00:31,840
And it allows you to install, update, and remove software 

13
00:00:31,840 --> 00:00:33,840
with simple commands. 

14
00:00:33,840 --> 00:00:37,830
We'll see how to use Ubuntu Linux's package manager, APT, in a little bit.

15
00:00:37,830 --> 00:00:40,180
Sometimes, what you want to install is not available 

16
00:00:40,180 --> 00:00:42,190
on the package manager you're using.

17
00:00:42,190 --> 00:00:44,570
In which case, you'll want to download the source code 

18
00:00:44,570 --> 00:00:46,570
and make and install it yourself.

19
00:00:46,570 --> 00:00:49,200
Let's see how.

20
00:00:49,200 --> 00:00:51,480
Now, when we want to install software 

21
00:00:51,480 --> 00:00:56,230
onto a Linux machine like this, there are a couple of different options.

22
00:00:56,230 --> 00:00:59,500
The best one is to use an automated package manager.

23
00:00:59,500 --> 00:01:04,800
On Ubuntu Linux that's APT, the advanced packaging tool.

24
00:01:04,800 --> 00:01:08,070
We'll see how to use that a little more in the next video.

25
00:01:08,070 --> 00:01:10,230
What we're going to do here is take a look 

26
00:01:10,230 --> 00:01:15,210
at the traditional or manual way of building and installing software 

27
00:01:15,210 --> 00:01:17,210
on a Linux-base machine.

28
00:01:17,210 --> 00:01:20,210
You often won't need to do this because the packages 

29
00:01:20,210 --> 00:01:24,020
will be available for you for an easier installation procedure. 

30
00:01:24,020 --> 00:01:28,750
However, sometimes a package may not be available on your system

31
00:01:28,750 --> 00:01:31,480
 for the software that you're trying to install.

32
00:01:31,480 --> 00:01:35,250
Or the version of the software that's available in the package manager

33
00:01:35,250 --> 00:01:37,290
might not be the version that you need, 

34
00:01:37,290 --> 00:01:42,400
in which case a manual installation process is what you'll need to do.

35
00:01:42,400 --> 00:01:47,250
I'm going to demonstrate by installing a piece of software called SQLite.

36
00:01:47,250 --> 00:01:50,700
This is a lightweight, file-based database 

37
00:01:50,700 --> 00:01:53,570
that can be used for producing your apps. 

38
00:01:53,570 --> 00:01:56,800
Now there does happen to be a package that we could use, 

39
00:01:56,800 --> 00:01:59,120
but for demonstration purposes, I'm going to show you

40
00:01:59,120 --> 00:02:02,800
 how to install from source.

41
00:02:02,800 --> 00:02:06,840
Before we begin, we actually do need to install a couple of tools 

42
00:02:06,840 --> 00:02:08,970
onto our machine so we'll be able to build 

43
00:02:08,970 --> 00:02:12,200
the SQLite program from source.

44
00:02:12,200 --> 00:02:16,080
You'll only need to do this once on your machine to install the tools.

45
00:02:16,080 --> 00:02:19,250
And if you're not using an Ubuntu Linux, these particular commands

46
00:02:19,250 --> 00:02:22,220
that you'll use to install these tools will be different.

47
00:02:22,220 --> 00:02:26,560
But for us, we're going to start by typing sudo because to install

48
00:02:26,560 --> 00:02:29,790
we'll need superuser access privileges.

49
00:02:29,790 --> 00:02:35,160
Then we'll type apt-get. This is part of the package-manager system.

50
00:02:35,160 --> 00:02:37,280
We'll actually be using the package manager,

51
00:02:37,280 --> 00:02:40,000
this is just the easiest way to install the tools 

52
00:02:40,000 --> 00:02:42,080
that we'll need to build our programs.

53
00:02:42,080 --> 00:02:45,410
After we type apt-get, we'll type update.

54
00:02:45,410 --> 00:02:49,110
This command will update the package manager's database 

55
00:02:49,110 --> 00:02:51,110
on our computer. 

56
00:02:51,110 --> 00:02:53,150
That way when we go to install our build tools, 

57
00:02:53,150 --> 00:02:55,700
we'll have the latest up-to-date version.

58
00:02:55,700 --> 00:02:58,260
This command is good to run every once in awhile 

59
00:02:58,260 --> 00:03:01,620
to make sure that your package database on your machine 

60
00:03:01,620 --> 00:03:04,450
is up to date with the latest version of all the packages

61
00:03:04,450 --> 00:03:07,900
 available from Ubuntu. 

62
00:03:07,900 --> 00:03:13,800
When we hit enter, we'll have to type in our password,

63
00:03:13,800 --> 00:03:17,690
and you'll notice that it's fetching many different URLs. 

64
00:03:17,690 --> 00:03:21,110
These are the databases that hold all of the different packages 

65
00:03:21,110 --> 00:03:25,700
that are available for our Ubuntu system.

66
00:03:25,700 --> 00:03:28,740
Now that we've run sudo apt-get update, 

67
00:03:28,740 --> 00:03:32,600
our package lists are up to date, so now we can install programs.

68
00:03:32,600 --> 00:03:34,950
I'm going to clear the screen. 

69
00:03:34,950 --> 00:03:41,700
And now we'll run sudo apt-get, and we'll use install. 

70
00:03:41,700 --> 00:03:44,230
And this will install a package by name.

71
00:03:44,230 --> 00:03:52,250
The package that we want to install is build-essential. And we'll hit enter.

72
00:03:52,250 --> 00:03:56,120
You'll notice that it's confirming everything that it's about to install.

73
00:03:56,120 --> 00:03:59,770
We'll hit the y key and hit enter.

74
00:03:59,770 --> 00:04:05,130
And now we'll see it beginning to install the tools that we've requested.

75
00:04:05,130 --> 00:04:09,600
And now the installation process has completed. Let me clear the screen.

76
00:04:09,600 --> 00:04:16,350
And we can confirm if the build tools were installed by typing which make.

77
00:04:16,350 --> 00:04:20,029
Which is a command that will take the name of a program

78
00:04:20,029 --> 00:04:23,710
and tell you exactly where it lives on the system.

79
00:04:23,710 --> 00:04:27,060
Make is a program that's used for building things,

80
00:04:27,060 --> 00:04:29,180
and it's one of the tools we'll use while installing 

81
00:04:29,180 --> 00:04:31,180
our program from source.

82
00:04:31,180 --> 00:04:33,930
The build-essential package included make—

83
00:04:33,930 --> 00:04:39,820
so because we see that make is in /usr/bin/make, 

84
00:04:39,820 --> 00:04:44,500
we can conclude that the build tools were successfully installed.

85
00:04:44,500 --> 00:04:46,540
So let's get back to installing SQLite. 

86
00:04:46,540 --> 00:04:49,500
I'm going to clear our screen one more time.

87
00:04:49,500 --> 00:04:53,250
The 1st thing we need to do is get the source code for SQLite.

88
00:04:53,250 --> 00:04:55,310
Usually you'll find this on the projects page, 

89
00:04:55,310 --> 00:04:57,640
maybe under the download section.

90
00:04:57,640 --> 00:05:01,350
We'll usually look for something that says source code or tarball. 

91
00:05:01,350 --> 00:05:03,920
But that's what we're looking for, and it provides source code 

92
00:05:03,920 --> 00:05:08,080
on this project in both a zip and a tar.gz file.

93
00:05:08,080 --> 00:05:11,200
A tar file, or a tarball, is much like a zip file;

94
00:05:11,200 --> 00:05:17,520
however, it's much more common this tar.gz extension or an archive.

95
00:05:17,520 --> 00:05:21,530
I'm going to go ahead and copy the link address—

96
00:05:21,530 --> 00:05:27,400
this will link to the tar.gz file, and we'll return to our console.

97
00:05:27,400 --> 00:05:32,390
We're going to type in curl -O. 

98
00:05:32,390 --> 00:05:36,890
Curl is a program for making requests from the Internet. 

99
00:05:36,890 --> 00:05:41,040
The -O will save the file that we're about to paste in here 

100
00:05:41,040 --> 00:05:43,160
to a file on our machine.

101
00:05:43,160 --> 00:05:49,000
And in order to paste, I'll right click and type Paste.

102
00:05:49,000 --> 00:05:52,280
If you attempt to use the control v or command v

103
00:05:52,280 --> 00:05:56,900
 paste keyboard combination in our web-based consult, it may not work.

104
00:05:56,900 --> 00:05:59,640
However, using right click on the console to paste 

105
00:05:59,640 --> 00:06:02,950
or the edit, paste menu in your top bar 

106
00:06:02,950 --> 00:06:06,950
should work for the web-based console that you're using.

107
00:06:06,950 --> 00:06:09,260
Now if I hit enter, it's going to download. 

108
00:06:09,260 --> 00:06:12,150
And if we take a look at ls, it looks like we've downloaded it 

109
00:06:12,150 --> 00:06:14,150
to our home directory.

110
00:06:14,150 --> 00:06:17,370
Now, I like to keep all of my build files in its own folder—

111
00:06:17,370 --> 00:06:19,500
not in the root of my home directory.

112
00:06:19,500 --> 00:06:21,630
So I probably should have created a directory 

113
00:06:21,630 --> 00:06:24,560
and downloaded that tar file into it.

114
00:06:24,560 --> 00:06:28,670
However, I can correct that by making that directory by using mkdir,

115
00:06:28,670 --> 00:06:31,900
and I'll call it source, or src.

116
00:06:31,900 --> 00:06:35,100
Now if we look, we have an src directory, and what I'm going to do 

117
00:06:35,100 --> 00:06:37,560
is move that tar file into that source directory,

118
00:06:37,560 --> 00:06:41,050
so it's not cluttering up my main home directory.

119
00:06:41,050 --> 00:06:44,380
To do that we do mv, I can type in SQLite, 

120
00:06:44,380 --> 00:06:48,760
and now I'll tell it where I want to put it inside the source directory.

121
00:06:48,760 --> 00:06:51,810
Now if I take a look at ls, it's no longer there.

122
00:06:51,810 --> 00:06:56,840
If I cd into source, there's our tar file.

123
00:06:56,840 --> 00:06:59,400
Let me go ahead and clear the screen.

124
00:06:59,400 --> 00:07:02,670
So the 1st thing I need to do is untar the file. 

125
00:07:02,670 --> 00:07:05,670
This is much like unzipping a zip file.

126
00:07:05,670 --> 00:07:08,980
The command we'll use is called tar. 

127
00:07:08,980 --> 00:07:10,980
Then we need to pass it some flags.

128
00:07:10,980 --> 00:07:17,140
The flags that we need to pass in order to extract it is -xvf.

129
00:07:17,140 --> 00:07:21,400
Now you may see slightly different flags in online tutorials. 

130
00:07:21,400 --> 00:07:24,980
This is a combination that will work for us. It means we want to extract.

131
00:07:24,980 --> 00:07:28,230
The v is going to give us some verbose output so we see 

132
00:07:28,230 --> 00:07:31,630
everything that happens, and the f is pointing to the tar file 

133
00:07:31,630 --> 00:07:34,260
that we want to extract.

134
00:07:34,260 --> 00:07:39,170
In our case, it's the sqlite-autoconf, and I was able to fill it in

135
00:07:39,170 --> 00:07:41,340
by using tab completion.

136
00:07:41,340 --> 00:07:46,300
So if we run this, we'll see that it listed all the files that it created.

137
00:07:46,300 --> 00:07:52,390
And if I clear our screen, ls, we can see there's now a directory 

138
00:07:52,390 --> 00:07:54,390
next to our tar file.

139
00:07:54,390 --> 00:07:59,720
So let's go into that—we'll go cd sqlite3.

140
00:07:59,720 --> 00:08:03,070
And now we're inside of that untarred file.

141
00:08:03,070 --> 00:08:07,730
If we take a look, we'll see that there are some files here.

142
00:08:07,730 --> 00:08:12,200
There are a few basic steps for installing a program from source.

143
00:08:12,200 --> 00:08:16,050
The 1st step we need to do is run a program called Configure

144
00:08:16,050 --> 00:08:18,790
 that exists inside of the project directory.

145
00:08:18,790 --> 00:08:21,870
Here can see a configure script that exists here.

146
00:08:21,870 --> 00:08:27,440
So in order to run that, we'll do ./configure.

147
00:08:27,440 --> 00:08:30,510
The ./ means that we want to run the configure program 

148
00:08:30,510 --> 00:08:32,510
that's in our current directory. 

149
00:08:32,510 --> 00:08:35,789
The dot [.] means our current directory /configure.

150
00:08:35,789 --> 00:08:39,179
If we were to just type configure, the system will look for a 

151
00:08:39,179 --> 00:08:41,929
configure program somewhere else on our system. 

152
00:08:41,929 --> 00:08:45,170
The ./ means we want to run the program that's right here 

153
00:08:45,170 --> 00:08:47,170
in our current directory.

154
00:08:47,170 --> 00:08:50,850
The purpose of this script is to look through our system 

155
00:08:50,850 --> 00:08:54,440
and prepare some more configuration files that will be used

156
00:08:54,440 --> 00:08:56,440
to actually build the program.

157
00:08:56,440 --> 00:08:59,750
Now it should run pretty quickly and as long as we don't see any errors, 

158
00:08:59,750 --> 00:09:01,810
we should be be good to go.

159
00:09:01,810 --> 00:09:04,500
What this program has done is created a special file 

160
00:09:04,500 --> 00:09:06,500
called a Makefile.

161
00:09:06,500 --> 00:09:10,860
If we do an ls, we'll see that there's now a Makefile.

162
00:09:10,860 --> 00:09:14,840
And this is a file that specifies how to build the program.

163
00:09:14,840 --> 00:09:17,980
The configure script was what generated the Makefile 

164
00:09:17,980 --> 00:09:20,600
that will be compatible with our system.

165
00:09:20,600 --> 00:09:22,600
Let's go ahead and clear.

166
00:09:22,600 --> 00:09:24,800
So now that we've configured our Makefile, we can actually execute it 

167
00:09:24,800 --> 00:09:27,040
using the program called make, 

168
00:09:27,040 --> 00:09:29,670
which is what we installed with build-essential.

169
00:09:29,670 --> 00:09:32,220
The simplest way to do this is to run make. 

170
00:09:32,220 --> 00:09:35,220
And we need to make sure we're in the same directory as our make file, 

171
00:09:35,220 --> 00:09:38,300
which should be the project directory itself.

172
00:09:38,300 --> 00:09:40,740
Now this will usually take a little while.

173
00:09:40,740 --> 00:09:43,950
It's actually building the program from all the source files.

174
00:09:43,950 --> 00:09:46,280
So depending on how large the program is and how fast

175
00:09:46,280 --> 00:09:49,480
the computer is, it could take anywhere from seconds to minutes 

176
00:09:49,480 --> 00:09:51,480
to even hours.

177
00:09:51,480 --> 00:09:53,580
This shouldn't take very long, but we're going to go ahead 

178
00:09:53,580 --> 00:09:56,080
and fast forward through it.

179
00:09:56,080 --> 00:09:59,280
So now our make command has completed.

180
00:09:59,280 --> 00:10:01,280
I'm going to go ahead and clear the screen.

181
00:10:01,280 --> 00:10:04,600
As long as we don't see any errors, everything should be good.

182
00:10:04,600 --> 00:10:08,520
Now we've built the program, but we haven't yet installed it.

183
00:10:08,520 --> 00:10:11,520
It's built the executables and everything that it needs.

184
00:10:11,520 --> 00:10:18,100
However, they're still all existing in this src/sqlite directory.

185
00:10:18,100 --> 00:10:20,900
To use it, we actually want those executables 

186
00:10:20,900 --> 00:10:22,900
 to be somewhere in our path.

187
00:10:22,900 --> 00:10:27,500
That way we can just run the executable like sqlite3, 

188
00:10:27,500 --> 00:10:30,380
which is the executable that we'll be installing.

189
00:10:30,380 --> 00:10:33,610
In order to do this we need to run a different make task 

190
00:10:33,610 --> 00:10:36,630
called make install.

191
00:10:36,630 --> 00:10:38,630
Now because it's already built a program, 

192
00:10:38,630 --> 00:10:40,630
it won't recompile everything; 

193
00:10:40,630 --> 00:10:44,220
however, it will just move everything that it has into somewhere 

194
00:10:44,220 --> 00:10:46,720
that will be accessible in our path.

195
00:10:46,720 --> 00:10:51,300
Now because it's going to be moving those executables into our path, 

196
00:10:51,300 --> 00:10:55,640
those directories may not be writable using our current user. 

197
00:10:55,640 --> 00:10:59,860
So we'll prepend it with sudo to make sure that when it tries to move 

198
00:10:59,860 --> 00:11:05,360
those files into their final locations, we'll have the permission to do so.

199
00:11:05,360 --> 00:11:08,940
Now it's gone ahead and installed everything where it needs to be.

200
00:11:08,940 --> 00:11:13,430
If I go ahead and clear, we can confirm that SQLite was installed.

201
00:11:13,430 --> 00:11:17,410
And I'll do that by returning to our home directory by typing cd—

202
00:11:17,410 --> 00:11:19,590
with no arguments.

203
00:11:19,590 --> 00:11:25,200
Now if we type which sqlite3, we'll see that it's been installed to 

204
00:11:25,200 --> 00:11:28,500
usr/local/bin/sqllite3.

205
00:11:28,500 --> 00:11:32,380
And since usr/local/bin is part of our path, we should be able 

206
00:11:32,380 --> 00:11:38,240
to type sqlite3, and we can see that, at least, it's begun starting up.

207
00:11:38,240 --> 00:11:41,350
However, we haven't given it the proper command. 

208
00:11:41,350 --> 00:11:43,350
And we can see that it's been installed.

209
00:11:43,350 --> 00:11:45,890
Now we're not actually going to be using sqlite3—I've just used it 

210
00:11:45,890 --> 00:11:49,260
as a demonstration of how to install a program.

211
00:11:49,260 --> 00:11:52,770
If ever you need to build and install something from source, 

212
00:11:52,770 --> 00:11:55,440
the process will be largely the same: 

213
00:11:55,440 --> 00:11:58,060
Download the source file onto your machine.

214
00:11:58,060 --> 00:12:01,310
Usually you'll need to untar it using the tar command.

215
00:12:01,310 --> 00:12:04,050
Then you'll need to run the configure script that comes with it.

216
00:12:04,050 --> 00:12:06,050
Run the make command. 

217
00:12:06,050 --> 00:12:10,980
And then finally, run sudo make install to install it to your system.

218
00:12:10,980 --> 00:12:12,980
Those are the basic steps.

219
00:12:12,980 --> 00:12:14,980
They may change a little bit here or there 

220
00:12:14,980 --> 00:12:19,540
allowing you to pass in configuration flags, but usually that's all you need.

221
00:12:19,540 --> 00:12:22,290
Next we'll see a much easier way to install things 

222
00:12:22,290 --> 00:12:26,540
using a package manager.

